import { useState, useEffect } from 'react';
import Head from 'next/head';
import { NestedObject, Premise, SearchPremisesQueryOutput, databaseInstance, premisesNestedLocations, searchPremises } from '../database';

function Premises({ premisesNestedLocations, initialPremises }: any) {

  const flexRow: {[key: string]: any} = {
    display: 'flex',
    flexDirection: 'row',
  };

  const marginLeft: {[key: string]: any} = {
    marginLeft: '5px'
  };

  const thPadTop: {[key: string]: any} = {
    top: '50px',
    marginTop: '50px'
  }

  let result: SearchPremisesQueryOutput = {};

  const [premises, setPremises] = useState([]);
  const [current, setCurrent] = useState(0);
  const [next, setNext] = useState(0);
  const [previous, setPrevious] = useState(0);
  const [state, setState] = useState(false);
  const [district, setDistrict] = useState(false);
  const [premiseType, setPremiseType] = useState(false);

  useEffect(() => {
    setPremises(initialPremises.premises);
    setCurrent(initialPremises.current);
    setNext(initialPremises.next);
    setPrevious(initialPremises.previous);
  }, [initialPremises]);

  const handleStateChange = (event: any) => {
    setState(Object.keys(premisesNestedLocations).indexOf(event.target.value) > -1 ? event.target.value : false);
    setDistrict(false);
    setPremiseType(false);
  };

  const handleDistrictChange = (event: any) => {
    if (Object.keys(premisesNestedLocations[state.toString()]).indexOf(event.target.value) > -1) {
      setDistrict(event.target.value);
      if (premisesNestedLocations[state.toString()][event.target.value].indexOf(premiseType) < 0)
        setPremiseType(false);
    } else {
      setDistrict(false);
    }
  };

  const handlePremiseTypeChange = (event: any) => {
    if (premisesNestedLocations[state.toString()][district.toString()].indexOf(event.target.value) > -1)
      setPremiseType(event.target.value);
    else
      setPremiseType(false);
  };

  async function searchPremises(event: any) {
    const query: {[key: string]: any} = {};
    if (state) query.state = state;
    if (district) query.district = district;
    if (premiseType) query.premise_type = premiseType;
    _searchPremises(query);
  }

  async function _searchPremises(query: NestedObject) {
    try {
      result = await (await fetch('/api/searchPremises?' + new URLSearchParams(query))).json();
      setPremises(result.premises);
      setCurrent(result.current);
      setNext(result.next);
      setPrevious(result.previous);
    } catch (err: any) {
      console.log(err);
    }
  }

  return (
    <>
      <Head>
        <title>Senarai Premis</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div style={{ ...flexRow, alignItems: 'center', justifyContent: 'space-between', position: 'fixed', zIndex: 99, backgroundColor: '#fff', width: '100%', height: '50px' }}>
          <div style={flexRow}>
            <div style={marginLeft}>
              <select id="state" name="state" onChange={handleStateChange}>
                {['Pilih Negeri', ...(Object.keys(premisesNestedLocations))].map((name) => {
                  return (<option key={name} value={name}>{name}</option>);
                })}
              </select>
            </div>
            {
              state &&
              <div style={marginLeft}>
              <select id="district" name="district" onChange={handleDistrictChange}>
                {['Pilih Daerah', ...(Object.keys(premisesNestedLocations[state.toString()]))].map((name) => {
                  return (<option key={name} value={name}>{name}</option>);
                })}
               </select>
              </div>
            }
            {
              district &&
              <div style={marginLeft}>
              <select id="premise_type" name="premise_type" onChange={handlePremiseTypeChange}>
                {['Pilih Jenis Premis', ...premisesNestedLocations[state.toString()][district.toString()]].map((name) => {
                  return (<option key={name} value={name}>{name}</option>);
                })}
               </select>
              </div>
            }
            <button style={marginLeft} onClick={searchPremises}>Cari Premis</button>
          </div>
          <div style={flexRow}>
            {
              previous != null &&
              <button style={marginLeft} onClick={() => {
                const query: {[key: string]: any} = {};
                if (state) query.state = state;
                if (district) query.district = district;
                if (premiseType) query.premise_type = premiseType;
                query.page = previous;
                _searchPremises(query);
              }}>&lt; {previous}</button>
            }
            <button style={marginLeft} disabled><div>Halaman {current}</div></button>
            {
              next != null &&
              <button style={marginLeft} onClick={() => {
                const query: {[key: string]: any} = {};
                if (state) query.state = state;
                if (district) query.district = district;
                if (premiseType) query.premise_type = premiseType;
                query.page = next;
                _searchPremises(query);
              }}>{next} &gt;</button>
            }
          </div>
        </div>
        <div style={{ position: 'absolute', marginTop: '50px' }}>
          <table>
            <thead>
              <tr>
                <th style={thPadTop}>Kod Premis</th>
                <th style={thPadTop}>Premis</th>
                <th style={thPadTop}>Alamat</th>
                <th style={thPadTop}>Jenis Premis</th>
                <th style={thPadTop}>Negeri</th>
                <th style={thPadTop}>Daerah</th>
                <th style={thPadTop}>Pilih</th>
              </tr>
            </thead>
            <tbody>
              {premises.map((premise: Premise) => {
                return (
                  <tr key={premise.premise_code}>
                    <td>{premise.premise_code}</td>
                    <td>{premise.premise}</td>
                    <td>{premise.premise}</td>
                    <td>{premise.premise_type}</td>
                    <td>{premise.state}</td>
                    <td>{premise.district}</td>
                    <td><button>Papar Barangan</button></td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </main>
    </>
  )
}

export async function getStaticProps() {
  try {
    const a = await premisesNestedLocations;
    const b = await searchPremises(databaseInstance, {});
    return {
      props: {
        premisesNestedLocations: a,
        initialPremises: b,
      },
    }
  } catch (err: any) {
    throw(err);
  }
}

export default Premises
